package LibraryProject.Library;


import LibraryProject.Library.DB.Books;
import LibraryProject.Library.DB.CRUD.BooksRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.ui.Model;
import LibraryProject.Library.DB.User;
import LibraryProject.Library.DB.CRUD.UserRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController
{
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
@Autowired
    private BooksRepository booksRepository;

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);

        userRepository.save(n);

        return "Saved";
    }


    @RequestMapping(value ="/add_book_user/{name}/{author}/{id_user}/{description}", method = RequestMethod.GET)
    public String addBooks(@PathVariable("id_user") Integer UserID, @PathVariable("description") String description,@PathVariable("name") String name , @PathVariable("author") String AuthorName, Model model)
    {//model sluzy do tego zeby do thymeleaf przekazac

        Books book = new Books();

        User user = userRepository.getById(UserID);

        book.setAuthor(name);
        book.setDescription(description);
        book.setName(name);
        Integer old = book.getCount_borrow();
        book.setCount_borrow(old+1);
        book.setBorrow(true);
        booksRepository.save(book);
        user.getBooks().add(book);
        userRepository.save(user);


return String.valueOf(booksRepository.findById(book.getId()));
    }
    @RequestMapping(value ="/show/{user_id}", method = RequestMethod.GET)
    public User user (@PathVariable("user_id") Integer id_user)
    {
        return  userRepository.findById(id_user).get();

    }


    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();

    }
}